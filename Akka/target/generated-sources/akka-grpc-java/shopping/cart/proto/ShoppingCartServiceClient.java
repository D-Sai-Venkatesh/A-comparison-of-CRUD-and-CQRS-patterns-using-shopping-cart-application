
// Generated by Akka gRPC. DO NOT EDIT.
package shopping.cart.proto;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static shopping.cart.proto.ShoppingCartService.Serializers.*;

import scala.concurrent.ExecutionContext;


import akka.grpc.javadsl.SingleResponseRequestBuilder;


public abstract class ShoppingCartServiceClient extends ShoppingCartServiceClientPowerApi implements ShoppingCartService, AkkaGrpcClient {
  public static final ShoppingCartServiceClient create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new DefaultShoppingCartServiceClient(settings, sys);
  }

  protected final static class DefaultShoppingCartServiceClient extends ShoppingCartServiceClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultShoppingCartServiceClient(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
        this.settings = settings;
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.clientState = new ClientState(
          settings,
          akka.event.Logging$.MODULE$.apply(sys.classicSystem(), DefaultShoppingCartServiceClient.class, akka.event.LogSource$.MODULE$.<DefaultShoppingCartServiceClient>fromAnyClass()),
          sys);
        this.options = NettyClientUtils.callOptions(settings);

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

  
    
      private final SingleResponseRequestBuilder<shopping.cart.proto.AddItemRequest, shopping.cart.proto.Cart> addItemRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(addItemDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<shopping.cart.proto.UpdateItemRequest, shopping.cart.proto.Cart> updateItemRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(updateItemDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<shopping.cart.proto.CheckoutRequest, shopping.cart.proto.Cart> checkoutRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(checkoutDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<shopping.cart.proto.GetCartRequest, shopping.cart.proto.Cart> getCartRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(getCartDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<shopping.cart.proto.GetItemPopularityRequest, shopping.cart.proto.GetItemPopularityResponse> getItemPopularityRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(getItemPopularityDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<shopping.cart.proto.EmptyMsg, shopping.cart.proto.EmptyMsg> failShoppingCartServiceRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(failShoppingCartServiceDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<shopping.cart.proto.FailCartMsg, shopping.cart.proto.Cart> failShoppingCartRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(failShoppingCartDescriptor, channel, options, settings, ec);
      }
    
  

      

        /**
         * For access to method metadata use the parameterless version of addItem
         */
        public java.util.concurrent.CompletionStage<shopping.cart.proto.Cart> addItem(shopping.cart.proto.AddItemRequest request) {
          return addItem().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer addItem(shopping.cart.proto.AddItemRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<shopping.cart.proto.AddItemRequest, shopping.cart.proto.Cart> addItem()
        
        {
          return addItemRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of updateItem
         */
        public java.util.concurrent.CompletionStage<shopping.cart.proto.Cart> updateItem(shopping.cart.proto.UpdateItemRequest request) {
          return updateItem().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer updateItem(shopping.cart.proto.UpdateItemRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<shopping.cart.proto.UpdateItemRequest, shopping.cart.proto.Cart> updateItem()
        
        {
          return updateItemRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of checkout
         */
        public java.util.concurrent.CompletionStage<shopping.cart.proto.Cart> checkout(shopping.cart.proto.CheckoutRequest request) {
          return checkout().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer checkout(shopping.cart.proto.CheckoutRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<shopping.cart.proto.CheckoutRequest, shopping.cart.proto.Cart> checkout()
        
        {
          return checkoutRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of getCart
         */
        public java.util.concurrent.CompletionStage<shopping.cart.proto.Cart> getCart(shopping.cart.proto.GetCartRequest request) {
          return getCart().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer getCart(shopping.cart.proto.GetCartRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<shopping.cart.proto.GetCartRequest, shopping.cart.proto.Cart> getCart()
        
        {
          return getCartRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of getItemPopularity
         */
        public java.util.concurrent.CompletionStage<shopping.cart.proto.GetItemPopularityResponse> getItemPopularity(shopping.cart.proto.GetItemPopularityRequest request) {
          return getItemPopularity().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer getItemPopularity(shopping.cart.proto.GetItemPopularityRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<shopping.cart.proto.GetItemPopularityRequest, shopping.cart.proto.GetItemPopularityResponse> getItemPopularity()
        
        {
          return getItemPopularityRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of failShoppingCartService
         */
        public java.util.concurrent.CompletionStage<shopping.cart.proto.EmptyMsg> failShoppingCartService(shopping.cart.proto.EmptyMsg request) {
          return failShoppingCartService().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer failShoppingCartService(shopping.cart.proto.EmptyMsg) if possible.
         */
        
          public SingleResponseRequestBuilder<shopping.cart.proto.EmptyMsg, shopping.cart.proto.EmptyMsg> failShoppingCartService()
        
        {
          return failShoppingCartServiceRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of failShoppingCart
         */
        public java.util.concurrent.CompletionStage<shopping.cart.proto.Cart> failShoppingCart(shopping.cart.proto.FailCartMsg request) {
          return failShoppingCart().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer failShoppingCart(shopping.cart.proto.FailCartMsg) if possible.
         */
        
          public SingleResponseRequestBuilder<shopping.cart.proto.FailCartMsg, shopping.cart.proto.Cart> failShoppingCart()
        
        {
          return failShoppingCartRequestBuilder(clientState.internalChannel());
        }
      

      
        private static MethodDescriptor<shopping.cart.proto.AddItemRequest, shopping.cart.proto.Cart> addItemDescriptor =
          MethodDescriptor.<shopping.cart.proto.AddItemRequest, shopping.cart.proto.Cart>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.ShoppingCartService", "AddItem"))
            .setRequestMarshaller(new ProtoMarshaller<shopping.cart.proto.AddItemRequest>(AddItemRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<shopping.cart.proto.Cart>(CartSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<shopping.cart.proto.UpdateItemRequest, shopping.cart.proto.Cart> updateItemDescriptor =
          MethodDescriptor.<shopping.cart.proto.UpdateItemRequest, shopping.cart.proto.Cart>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.ShoppingCartService", "UpdateItem"))
            .setRequestMarshaller(new ProtoMarshaller<shopping.cart.proto.UpdateItemRequest>(UpdateItemRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<shopping.cart.proto.Cart>(CartSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<shopping.cart.proto.CheckoutRequest, shopping.cart.proto.Cart> checkoutDescriptor =
          MethodDescriptor.<shopping.cart.proto.CheckoutRequest, shopping.cart.proto.Cart>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.ShoppingCartService", "Checkout"))
            .setRequestMarshaller(new ProtoMarshaller<shopping.cart.proto.CheckoutRequest>(CheckoutRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<shopping.cart.proto.Cart>(CartSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<shopping.cart.proto.GetCartRequest, shopping.cart.proto.Cart> getCartDescriptor =
          MethodDescriptor.<shopping.cart.proto.GetCartRequest, shopping.cart.proto.Cart>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.ShoppingCartService", "GetCart"))
            .setRequestMarshaller(new ProtoMarshaller<shopping.cart.proto.GetCartRequest>(GetCartRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<shopping.cart.proto.Cart>(CartSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<shopping.cart.proto.GetItemPopularityRequest, shopping.cart.proto.GetItemPopularityResponse> getItemPopularityDescriptor =
          MethodDescriptor.<shopping.cart.proto.GetItemPopularityRequest, shopping.cart.proto.GetItemPopularityResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.ShoppingCartService", "GetItemPopularity"))
            .setRequestMarshaller(new ProtoMarshaller<shopping.cart.proto.GetItemPopularityRequest>(GetItemPopularityRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<shopping.cart.proto.GetItemPopularityResponse>(GetItemPopularityResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<shopping.cart.proto.EmptyMsg, shopping.cart.proto.EmptyMsg> failShoppingCartServiceDescriptor =
          MethodDescriptor.<shopping.cart.proto.EmptyMsg, shopping.cart.proto.EmptyMsg>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.ShoppingCartService", "FailShoppingCartService"))
            .setRequestMarshaller(new ProtoMarshaller<shopping.cart.proto.EmptyMsg>(EmptyMsgSerializer))
            .setResponseMarshaller(new ProtoMarshaller<shopping.cart.proto.EmptyMsg>(EmptyMsgSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<shopping.cart.proto.FailCartMsg, shopping.cart.proto.Cart> failShoppingCartDescriptor =
          MethodDescriptor.<shopping.cart.proto.FailCartMsg, shopping.cart.proto.Cart>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.ShoppingCartService", "FailShoppingCart"))
            .setRequestMarshaller(new ProtoMarshaller<shopping.cart.proto.FailCartMsg>(FailCartMsgSerializer))
            .setResponseMarshaller(new ProtoMarshaller<shopping.cart.proto.Cart>(CartSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



